@model BudgetingApplication.ViewModels.TrendsViewModel
@{
    ViewBag.Title = "Index";
    ViewBag.PageName = "Trends";
    Layout = "~/Views/_Layout.cshtml";
}

<script src="~/scripts/JS/Chart.bundle.min.js"></script>
<script src="~/scripts/JS/HighCharts-5.0.10/code/highcharts.js"></script>
<script src="~/scripts/JS/HighCharts-5.0.10/code/modules/exporting.js"></script>

<style>
    .form-div {
        float: left;
        margin-left: 40px;
    }

    .button {
        margin-top: 5px;
        color: white;
        background-color: darkgreen;
    }

    #reset-button {
        margin-top: 25px;
        font-weight: bold;
    }

    #reset-div {
        float: left;
        clear: right;
    }

    .sidebar-padding {
        padding-bottom: 10px;
    }

    .center-align {
        text-align: center;
    }

    .spending-by {
        padding-top: 20px;
    }
</style>

@section sidebar{
    <h3><b>Statistics</b></h3>
    <h4>Total Spending:</h4>
    <h6 class="sidebar-padding">$@string.Format("{0:n2}", Model.TotalSpent)</h6>
    <h4>Most Spent:</h4>
    <h6 class="sidebar-padding">$@string.Format("{0:n2}", Model.MostSpent) in @Model.MostSpentCategory</h6>
    <h4>Least Spent:</h4>
    <h6 class="sidebar-padding">$@string.Format("{0:n2}", Model.LeastSpent) in @Model.LeastSpentCategory</h6>
    <h4>Average Spending:</h4>
    <h6>$@string.Format("{0:n2}", Model.AverageSpending)</h6>
    
}

<h2 class="center-align">Trends</h2>

@if (!Model.ValidDates)
{
    <h4 class="center-align" style="color:red">Start date was after end date</h4>
}

@using (Html.BeginForm("Filter", "Trends"))
{
    <!-- FORM CONTAINER -->
    <div style="width:95%">
        <!-- CATEGORY DROPDOWN LIST -->
        <div class="form-group form-div">
            @Html.Label("Select Category")
            @Html.DropDownList("Category", new SelectList(Model.Categories, "CategoryType", "CategoryType"), "All", new { @class = "form-control" })
        </div>
        <!-- START DATE MONTH-->
        <div class="form-group form-div">
            @Html.Label("Start Month")
            @Html.DropDownList(
                 "StartMonth",
                 new SelectList(Model.Months, Model.Months.Single(x => x.Equals(Model.StartDate.ToString("MMMM")))),
                 new { @class = "form-control" }
         )
        </div>
        <!-- START DATE YEAR -->
        <div class="form-group" style="float:left">
            @Html.Label("Start Year")
            @Html.DropDownList("StartYear",
                 new SelectList(Model.Years, Model.Years.Single(x => x.Equals(Model.StartDate.Year.ToString()))),
                 new { @class = "form-control" }
         )
        </div>
        <!-- END DATE MONTH -->
        <div class="form-group form-div">
            @Html.Label("End Month")
            @Html.DropDownList(
                 "EndMonth",
                 new SelectList(Model.Months, Model.Months.Single(x => x.Equals(Model.EndDate.ToString("MMMM")))),
                 new { @class = "form-control" }
         )
        </div>
        <!-- END DATE YEAR -->
        <div class="form-group" style="float:left">
            @Html.Label("End Year")
            @Html.DropDownList(
                 "EndYear",
                 new SelectList(Model.Years, Model.Years.Single(x => x.Equals(Model.EndDate.Year.ToString()))),
                 new { @class = "form-control" }
         )
        </div>
        <!-- FILTER BUTTON -->
        <div class="form-group form-div">
            @Html.Label(" ")
            <button class="btn btn-default form-control button" type="submit"><b>Filter</b></button>
        </div>
    </div>
}

<!-- RESET BUTTON -->
<div id="reset-div" class="form-group form-div">
    @Html.ActionLink(
        "Reset",
        "Index",
        null,
        new { @id = "reset-button", @class = "btn btn-default button" }
    )
</div>

<!-- SPENDING BY... HEADER -->
@if (!String.IsNullOrEmpty(Model.Category))
{
    <h4 class="center-align spending-by" style="clear:left">Spending By Category</h4>
}
else
{
    <h4 class="center-align spending-by" style="clear:left">Spending By Month</h4>   
}


<canvas id="donut-chart" height="100"></canvas>


<h4 class="center-align" style="clear:left;margin-top:50px">Budget Breakdown</h4>
<div id="budget-breakdown-chart" style="max-height:400px; margin:auto"></div>

<script>
    var ctx = document.getElementById("donut-chart").getContext("2d");
    var data = {
        labels: 
            @Html.Raw(Json.Encode(Model.ChartLabels)),
        datasets: [
            {
                data: @Html.Raw(Json.Encode(Model.TransactionAmounts.Values)),
                backgroundColor: @Html.Raw(Json.Encode(Model.Colors)),
                hoverBackgroundColor: [
                    "#808080",
                    "#808080",
                    "#808080",
                    "#808080",
                    "#808080",
                    "#808080",
                    "#808080",
                    "#808080",
                    "#808080",
                    "#808080",
                    "#808080",
                    "#808080",
                    "#808080",
                    "#808080"
                ]
            }]
    };
    var options = {
        responsive: true,
        animation:{
            animateScale: true,
            animateRotate: true
        },
        legend:{
            fullWidth: true
        }
    };
    var myDoughnutChart = new Chart(ctx, {
        type: 'doughnut',
        data: data,
        options: options
    });
</script>

<script>
    Highcharts.getOptions().colors = Highcharts.map(Highcharts.getOptions().colors, function (color) {
        return Highcharts.Color(color)
            .setOpacity(0.7)
            .get('rgba');
    });

    Highcharts.chart('budget-breakdown-chart', {
        chart: {
            type: 'column',
            marginTop: 50
        },
        title: {
            text: ''
        },
        xAxis: {
            categories: @Html.Raw(Json.Encode(Model.ChartLabels)),
        },
        yAxis: {
            min: 0,
            title: {
                text: 'Totals ($)'
            }
        },
        legend: {
            layout: 'vertical',
            backgroundColor: '#FFFFFF',
            align: 'left',
            verticalAlign: 'top',
            x: 100,
            y: 0,
            floating: true,
            shadow: true
        },
        tooltip: {
            shared: true,
            valuePrefix: '$'
        },
        plotOptions: {
            column: {
                grouping: false,
                shadow: false
            }
        },
        series: [{
            name: 'Spent',
            data: @Html.Raw(Json.Encode(Model.TransactionAmounts.Values)),
            pointPadding: 0
        }, {
            name: 'Budgeted',
            data: @Html.Raw(Json.Encode(Model.BudgetTotals.Values)),
            pointPadding: 0.3,
            color: {
                linearGradient: { x1: 0, x2: 0, y1: 0, y2: 1 },
                stops: [
                    [0, '#000000'],
                    [1, '#3366AA']
                ]
            }
        }]
    });
</script>